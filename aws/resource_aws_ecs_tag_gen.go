// Code generated by internal/tagresource/generator/main.go; DO NOT EDIT.

package aws

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/terraform-providers/terraform-provider-aws/aws/internal/keyvaluetags"
	"github.com/terraform-providers/terraform-provider-aws/aws/internal/tagresource"
)

func resourceAwsEcsTag() *schema.Resource {
	return &schema.Resource{
		Create: resourceAwsEcsTagCreate,
		Read:   resourceAwsEcsTagRead,
		Update: resourceAwsEcsTagUpdate,
		Delete: resourceAwsEcsTagDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"resource_arn": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"key": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"value": {
				Type:     schema.TypeString,
				Required: true,
			},
		},
	}
}

func resourceAwsEcsTagCreate(d *schema.ResourceData, meta interface{}) error {
	conn := meta.(*AWSClient).ecsconn

	identifier := d.Get("resource_arn").(string)
	key := d.Get("key").(string)
	value := d.Get("value").(string)

	if err := keyvaluetags.EcsUpdateTags(conn, identifier, nil, map[string]string{key: value}); err != nil {
		fmt.Errorf("error creating ecs resource (%s) tag (%s): %w", identifier, key, err)
	}

	d.SetId(tagresource.SetResourceId(identifier, key))

	return resourceAwsEcsTagRead(d, meta)
}

func resourceAwsEcsTagRead(d *schema.ResourceData, meta interface{}) error {
	conn := meta.(*AWSClient).ecsconn
	identifier, key, err := tagresource.GetResourceId(d.Id())

	if err != nil {
		return err
	}

	exists, value, err := keyvaluetags.EcsGetTag(conn, identifier, key)

	if err != nil {
		fmt.Errorf("error reading ecs resource (%s) tag (%s): %w", identifier, key, err)
	}

	if !exists {
		log.Printf("[WARN] ecs resource (%s) tag (%s) not found, removing from state", identifier, key)
		d.SetId("")
		return nil
	}

	d.Set("resource_arn", identifier)
	d.Set("key", key)
	d.Set("value", value)

	return nil
}

func resourceAwsEcsTagUpdate(d *schema.ResourceData, meta interface{}) error {
	conn := meta.(*AWSClient).ecsconn
	identifier, key, err := tagresource.GetResourceId(d.Id())

	if err != nil {
		return err
	}

	if err := keyvaluetags.EcsUpdateTags(conn, identifier, nil, map[string]string{key: d.Get("value").(string)}); err != nil {
		return fmt.Errorf("error updating ecs resource (%s) tag (%s): %w", identifier, key, err)
	}

	return resourceAwsEcsTagRead(d, meta)
}

func resourceAwsEcsTagDelete(d *schema.ResourceData, meta interface{}) error {
	conn := meta.(*AWSClient).ecsconn
	identifier, key, err := tagresource.GetResourceId(d.Id())

	if err != nil {
		return err
	}

	if err := keyvaluetags.EcsUpdateTags(conn, identifier, map[string]string{key: d.Get("value").(string)}, nil); err != nil {
		return fmt.Errorf("error deleting ecs resource (%s) tag (%s): %w", identifier, key, err)
	}

	return nil
}
